{"version":3,"sources":["Button.tsx","Lcd.tsx","GameScreen.tsx","LeaderBoardScreen.tsx","ScoreScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","pumpIt","children","onClick","className","style","animationDuration","SmallLCD","display","margin","height","padding","value","paddedValue","toString","padStart","length","formatText","LCD","BpmTracker","useState","Date","lastUserBeat","setLastUserBeat","addTap","e","now","bpm","Math","round","valueOf","onBpm","useEffect","document","addEventListener","removeEventListener","Fragment","GameScreen","onGameOver","floor","random","bpmTarget","playerBpm","setPlayerBpm","score","setScore","timeLeft","setTimeLeft","isRunning","setIsRunning","isFinished","setIsFinished","timerID","setInterval","time","clearInterval","bpmInterval","marginBottom","curScore","diff","abs","calculateScore","fontSize","to","push","LS_KEY","DEFAULT_SCORES","id","name","getScoresAsync","scoresList","getScoresFromLocalstorage","Promise","resolve","setTimeout","JSON","parse","localStorage","getItem","setItem","stringify","LeaderBoardScreen","scores","setScores","loading","setLoading","a","sort","b","loadScores","map","s","key","ScoreScreen","setName","history","useHistory","onSubmit","preventDefault","scoreList","newScoreItem","reduce","prev","cur","saveScore","type","placeholder","onChange","target","color","marginRight","App","basename","role","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a3a23f2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\ninterface ButtonProps {\n  onClick?: (e: React.MouseEvent) => void;\n\n  /**\n   * Animation speed in ms.\n   */\n  pumpIt?: number;\n}\n\nexport const Button: React.FC<ButtonProps> = props => {\n  const { pumpIt, children, onClick } = props;\n\n  return (\n    <div className=\"big-round-button-container\">\n      <button\n        className={\"big-round-button shiny-button \" + (pumpIt ? \"pump-it\" : \"\")}\n        style={{ animationDuration: `${pumpIt}ms` }}\n        onClick={onClick}\n      >\n        {children}\n      </button>\n    </div>\n  );\n};\n","import React, { CSSProperties } from \"react\";\nimport \"./Lcd.css\";\n\ninterface SmallLCDProps {\n  value: number | string;\n  style?: CSSProperties;\n}\n\nexport const SmallLCD: React.FC<SmallLCDProps> = props => {\n  const formatText = (value: number | string) => {\n    const paddedValue = value.toString().padStart(3, \"0\");\n    return paddedValue.length > 3 ? \"999\" : paddedValue;\n  };\n\n  return (\n    <LCD\n      {...props}\n      style={{\n        ...props.style,\n        display: \"inline\",\n        margin: 0,\n        height: \"initial\",\n        padding: \"10px\"\n      }}\n    >\n      {formatText(props.value)}\n    </LCD>\n  );\n};\n\nconst LCD: React.FC<any> = props => {\n  return (\n    <div className=\"lcd\" {...props}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default LCD;\n","import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Button } from \"./Button\";\nimport { SmallLCD } from \"./Lcd\";\n\ninterface BpmTrackerProps {\n  onBpm: (bpm: number) => void;\n  [otherProps: string]: any;\n}\n\nexport const BpmTracker: React.FC<BpmTrackerProps> = props => {\n  const [lastUserBeat, setLastUserBeat] = useState<Date>(new Date());\n\n  const addTap = (e: any) => {\n    const now = new Date();\n    if (lastUserBeat !== null) {\n      const bpm = Math.round(60000 / (now.valueOf() - lastUserBeat.valueOf()));\n      props.onBpm(bpm);\n    }\n    setLastUserBeat(now);\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", addTap, false);\n    document.addEventListener(\"keydown\", addTap, false);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", addTap);\n      document.removeEventListener(\"keydown\", addTap);\n    };\n  });\n\n  return <React.Fragment>{props.children}</React.Fragment>;\n};\n\ninterface GameScreenProps {\n  onGameOver: (score: number) => void;\n}\n\nexport const GameScreen: React.FC<GameScreenProps> = ({ onGameOver }) => {\n  const [bpmTarget] = useState(() => Math.floor(Math.random() * 100 + 80));\n  const [playerBpm, setPlayerBpm] = useState(0);\n  const [score, setScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(15);\n  const [isRunning, setIsRunning] = useState(false);\n  const [isFinished, setIsFinished] = useState(false);\n\n  const start = () => {\n    setIsRunning(true);\n  };\n\n  useEffect(() => {\n    if (!isRunning) {\n      return;\n    }\n\n    const timerID = setInterval(() => {\n      setTimeLeft(time => time - 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(timerID);\n    };\n  }, [isRunning]);\n\n  useEffect(() => {\n    if (timeLeft < 1) {\n      onGameOver(score);\n      setIsFinished(true);\n    }\n  }, [timeLeft, onGameOver, score]);\n\n  const bpmInterval = (bpm: number) => (60 / bpm) * 1000;\n  /**\n   * Calculate points for bpm accuracy. 10 for exact bpm hit, 5 for a close hit, otherwise 0.\n   * @param bpm\n   * @param bpmTarget\n   */\n  const calculateScore = (bpm: number, bpmTarget: number) => {\n    const diff = Math.abs(bpm - bpmTarget);\n    return diff ? (diff < 10 ? 5 : 0) : 10;\n  };\n\n  const bpmHandler = (bpm: number) => {\n    setPlayerBpm(bpm);\n    setScore(curScore => curScore + calculateScore(bpm, bpmTarget));\n  };\n\n  return (\n    <div>\n      <div style={{ marginBottom: \"20px\" }}>\n        <div className=\"cell\">\n          <h3>Bpm Target</h3>\n          <SmallLCD value={bpmTarget}></SmallLCD>\n        </div>\n        <div className=\"cell\">\n          <h3>Your BPM</h3>\n          <SmallLCD value={playerBpm}></SmallLCD>\n        </div>\n        <div className=\"cell\">\n          <h3>Score</h3>\n          <SmallLCD value={score}></SmallLCD>\n        </div>\n        <div className=\"cell\">\n          <h3>Time left</h3>\n          <SmallLCD value={timeLeft}></SmallLCD>\n        </div>\n      </div>\n\n      {isRunning ? (\n        <BpmTracker onBpm={bpmHandler}>\n          <Button pumpIt={bpmInterval(bpmTarget)}>Hit</Button>\n        </BpmTracker>\n      ) : (\n        <Button pumpIt={bpmInterval(bpmTarget)} onClick={start}>\n          &#9654; <div style={{ fontSize: \"0.5em\" }}>Start</div>\n        </Button>\n      )}\n      {isFinished ? <Redirect to=\"score\" push={true}></Redirect> : \"\"}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"./Button\";\nimport LCD from \"./Lcd\";\n\ninterface Score {\n  id: number;\n  name: string;\n  score: number;\n}\n\nconst LS_KEY = \"push-the-tempo-scores\";\n\nconst DEFAULT_SCORES: Score[] = [\n  {\n    id: 1,\n    name: \"tomas\",\n    score: 20\n  },\n  {\n    id: 2,\n    name: \"sanne\",\n    score: 150\n  },\n  {\n    id: 3,\n    name: \"tomas\",\n    score: 30\n  },\n  {\n    id: 4,\n    name: \"tomas\",\n    score: 40\n  },\n  {\n    id: 5,\n    name: \"piet\",\n    score: 85\n  }\n];\n\nfunction getScoresAsync(): Promise<Score[]> {\n  const scoresList = getScoresFromLocalstorage();\n\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(scoresList);\n    }, 2000);\n  });\n}\n\n/**\n * Get scores from localstorage or default scores.\n */\nfunction getScoresFromLocalstorage(): Score[] {\n  let scoresList: Score[] = JSON.parse(localStorage.getItem(LS_KEY) || \"[]\");\n\n  if (scoresList.length === 0) {\n    // fill once with some default scores.\n    localStorage.setItem(LS_KEY, JSON.stringify(DEFAULT_SCORES));\n    scoresList = DEFAULT_SCORES;\n  }\n\n  return scoresList;\n}\n\nexport function saveScore({ name, score }: Pick<Score, \"name\" | \"score\">) {\n  const scoreList = getScoresFromLocalstorage();\n  const highestId = scoreList.reduce((prev, cur) => {\n    return prev.id > cur.id ? prev : cur;\n  }).id;\n\n  const newScoreItem: Score = { id: highestId + 1, name, score };\n\n  localStorage.setItem(LS_KEY, JSON.stringify([...scoreList, newScoreItem]));\n}\n\nexport const LeaderBoardScreen: React.FC = () => {\n  const [scores, setScores] = useState<Score[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  async function loadScores() {\n    setLoading(true);\n\n    const scores = await getScoresAsync();\n    setScores(scores.sort((a, b) => b.score - a.score));\n\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    loadScores();\n  }, []);\n\n  return (\n    <React.Fragment>\n      <LCD>\n        <ol className=\"leaderbord-list\">\n          {loading ? \"Loading scores...\" : \"\"}\n          {scores.map(s => (\n            <li key={s.id}>\n              {s.name}\n              <span className=\"score\">{s.score}</span>\n            </li>\n          ))}\n        </ol>\n      </LCD>\n      <Link to=\"game\">\n        <Button pumpIt={600}>&#9654;</Button>\n      </Link>\n    </React.Fragment>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { SmallLCD } from \"./Lcd\";\nimport { saveScore } from \"./LeaderBoardScreen\";\n\ninterface ScoreScreenProps {\n  score: number;\n}\n\nexport const ScoreScreen: React.FC<ScoreScreenProps> = ({ score }) => {\n  const [name, setName] = useState(\"\");\n  const history = useHistory();\n\n  const submitHandler = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    saveScore({\n      name,\n      score\n    });\n\n    history.push(\"/\");\n  };\n\n  return (\n    <div>\n      <h2>Well done! Your score: </h2>\n      <SmallLCD value={score}></SmallLCD>\n\n      <div>\n        <h2>Enter your name to enter the hall of fame!</h2>\n        <form onSubmit={submitHandler}>\n          <div>\n            <input\n              style={{ padding: \"5px\", margin: \"15px\", fontSize: \"16px\" }}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"your name...\"\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n          </div>\n          <div>\n            <Link to=\"/\" style={{ color: \"#fff\", marginRight: \"20px\" }}>\n              Try again\n            </Link>\n            <button type=\"submit\" className=\"submit-button\">\n              Submit\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { GameScreen } from \"./GameScreen\";\nimport { LeaderBoardScreen } from \"./LeaderBoardScreen\";\nimport { ScoreScreen } from \"./ScoreScreen\";\n\nfunction App() {\n  const [score, setScore] = useState(0);\n\n  const gameOverHandler = (score: number) => {\n    setScore(score);\n  };\n\n  return (\n    <Router basename=\"/push-the-tempo\">\n      <div className=\"app\">\n        <header>\n          <h1>\n            <span role=\"img\">🔊</span> Push the tempo!\n          </h1>\n        </header>\n        <main>\n          <Route path=\"/\" exact>\n            <LeaderBoardScreen />\n          </Route>\n          <Route path=\"/game\">\n            <GameScreen onGameOver={gameOverHandler}></GameScreen>\n          </Route>\n          <Route path=\"/score\">\n            <ScoreScreen score={score} />\n          </Route>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}