{"version":3,"sources":["Button.tsx","Lcd.tsx","GameScreen.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","className","onClick","children","SmallLCD","style","display","margin","height","padding","value","paddedValue","toString","padStart","length","formatText","LCD","GameScreen","console","log","useState","startDate","setStartDate","Math","floor","random","bpmTarget","playerBpm","setPlayerBpm","score","setScore","timeLeft","setTimeLeft","startTimer","intervalId","setInterval","clearInterval","float","onBpm","bpm","curScore","diff","abs","calculateScore","Date","SCORES","id","name","LeaderBoardScreen","scores","setScores","loading","setLoading","useEffect","timeOutId","setTimeout","sort","a","b","clearTimeout","Fragment","map","s","key","to","BpmButton","lastUserBeat","setLastUserBeat","addTap","e","now","round","valueOf","document","addEventListener","removeEventListener","ScoreScreen","App","role","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7895f048.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\ninterface ButtonProps {\n  onClick?: (e: React.MouseEvent) => void;\n}\n\nconst Button: React.FC<ButtonProps> = props => {\n  return (\n    <button className=\"shiny-button\" onClick={props.onClick}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { CSSProperties } from \"react\";\n\ninterface SmallLCDProps {\n  value: number | string;\n  style?: CSSProperties;\n}\n\nexport const SmallLCD: React.FC<SmallLCDProps> = props => {\n  const formatText = (value: number | string) => {\n    const paddedValue = value.toString().padStart(3, \"0\");\n    return paddedValue.length > 3 ? \"999\" : paddedValue;\n  };\n\n  return (\n    <LCD\n      {...props}\n      style={{\n        ...props.style,\n        display: \"inline\",\n        margin: 0,\n        height: \"initial\",\n        padding: \"3px\"\n      }}\n    >\n      {formatText(props.value)}\n    </LCD>\n  );\n};\n\nconst LCD: React.FC<any> = props => {\n  return (\n    <div className=\"lcd\" {...props}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default LCD;\n","import React, { useState } from \"react\";\nimport Button from \"./Button\";\nimport { SmallLCD } from \"./Lcd\";\nimport { clearInterval } from \"timers\";\nimport { BpmButton } from \"./App\";\n\nexport const GameScreen: React.FC = () => {\n  console.log(\"gamescreen rendered\");\n  const randomBpm = () => Math.floor(Math.random() * 100 + 80);\n  const [startDate, setStartDate] = useState<Date | null>(null);\n  const [bpmTarget, setBpmTarget] = useState(randomBpm());\n  const [playerBpm, setPlayerBpm] = useState(0);\n  const [score, setScore] = useState(0);\n  const [timeLeft, setTimeLeft] = useState(6);\n  const start = () => {\n    console.log(\"Starting\");\n    setStartDate(new Date());\n    startTimer();\n  };\n  const startTimer = () => {\n    const intervalId = setInterval(() => {\n      console.log(`timeleft: ${timeLeft}`);\n      if (timeLeft > 0) {\n        setTimeLeft(timeLeft - 1);\n      } else {\n        console.log(\"clearing interval\");\n        clearInterval(intervalId);\n      }\n    }, 1000);\n  };\n  /**\n   * Calculate points for bpm accuracy. 10 for exact bpm hit, 5 for a close hit, otherwise 0.\n   * @param bpm\n   * @param bpmTarget\n   */\n  const calculateScore = (bpm: number, bpmTarget: number) => {\n    const diff = Math.abs(bpm - bpmTarget);\n    return diff ? (diff < 10 ? 5 : 0) : 10;\n  };\n  const bpmHandler = (bpm: number) => {\n    setPlayerBpm(bpm);\n    setScore(curScore => curScore + calculateScore(bpm, bpmTarget));\n  };\n  return (\n    <div>\n      <h2>\n        Bpm Target\n        <SmallLCD style={{ float: \"right\" }} value={bpmTarget}></SmallLCD>\n      </h2>\n      <h2>\n        Your BPM\n        <SmallLCD style={{ float: \"right\" }} value={playerBpm}></SmallLCD>\n      </h2>\n      <h2>\n        Score\n        <SmallLCD style={{ float: \"right\" }} value={score}></SmallLCD>\n      </h2>\n      <h2>\n        Time left\n        <SmallLCD style={{ float: \"right\" }} value={timeLeft}></SmallLCD>\n      </h2>\n\n      {startDate ? (\n        <BpmButton onBpm={bpmHandler}>Hit</BpmButton>\n      ) : (\n        <Button onClick={start}>&#9654;</Button>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Button from \"./Button\";\nimport LCD from \"./Lcd\";\nimport { GameScreen } from \"./GameScreen\";\n\ninterface Score {\n  id: number;\n  name: string;\n  score: number;\n}\n\nconst SCORES: Score[] = [\n  {\n    id: 1,\n    name: \"tomas\",\n    score: 13\n  },\n  {\n    id: 2,\n    name: \"sanne\",\n    score: 156\n  },\n  {\n    id: 3,\n    name: \"tomas\",\n    score: 17\n  },\n  {\n    id: 4,\n    name: \"tomas\",\n    score: 40\n  },\n  {\n    id: 5,\n    name: \"piet\",\n    score: 17\n  }\n];\n\nconst LeaderBoardScreen: React.FC = () => {\n  const [scores, setScores] = useState<Score[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n\n    const timeOutId = setTimeout(() => {\n      setLoading(false);\n      setScores(SCORES.sort((a, b) => b.score - a.score));\n    }, 2000);\n\n    return () => {\n      clearTimeout(timeOutId);\n      setLoading(false);\n    };\n  }, []);\n\n  return (\n    <React.Fragment>\n      <LCD>\n        <ol className=\"leaderbord-list\">\n          {loading ? \"Loading scores...\" : \"\"}\n          {scores.map(s => (\n            <li key={s.id}>\n              {s.name}\n              <span className=\"score\">{s.score}</span>\n            </li>\n          ))}\n        </ol>\n      </LCD>\n      <Link to=\"game\">\n        <Button>&#9654;</Button>\n      </Link>\n    </React.Fragment>\n  );\n};\n\ninterface BpmButtonProps {\n  onBpm: (bpm: number) => void;\n}\n\nexport const BpmButton: React.FC<BpmButtonProps> = props => {\n  const [lastUserBeat, setLastUserBeat] = useState<Date>(new Date());\n\n  const addTap = (e: any) => {\n    const now = new Date();\n    if (lastUserBeat !== null) {\n      const bpm = Math.round(60000 / (now.valueOf() - lastUserBeat.valueOf()));\n      props.onBpm(bpm);\n    }\n    setLastUserBeat(now);\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"mousedown\", addTap, false);\n    document.addEventListener(\"keydown\", addTap, false);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", addTap);\n      document.removeEventListener(\"keydown\", addTap);\n    };\n  });\n\n  return <Button>{props.children}</Button>;\n};\n\nconst ScoreScreen: React.FC = () => {\n  return <p>hi</p>;\n};\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <header>\n          <h1>\n            <span role=\"img\">🔊</span> 4 ON THE FLOOR\n          </h1>\n        </header>\n        <main>\n          <Route path=\"/\" exact>\n            <LeaderBoardScreen />\n          </Route>\n          <Route path=\"/game\">\n            <Link to=\"/\">\n              <button>back</button>\n            </Link>\n            <GameScreen></GameScreen>\n          </Route>\n          <Route path=\"/score\">\n            <ScoreScreen />\n          </Route>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}